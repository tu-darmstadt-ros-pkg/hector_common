diff -rupN a/config/FindMATRIX.cmake b/config/FindMATRIX.cmake
--- config/FindMATRIX.cmake	2013-06-19 20:38:11.595762479 +0200
+++ config/FindMATRIX.cmake	2013-06-19 20:38:24.931594824 +0200
@@ -24,11 +24,16 @@ IF (NOT __MATRIXWRAPPER_BOOST__)
 ENDIF (NOT __MATRIXWRAPPER_BOOST__)
 SET(__MATRIXWRAPPER_BOOST__ OFF)
 
+IF (NOT __MATRIXWRAPPER_EIGEN__)
+  SET(__MATRIXWRAPPER_EIGEN__ OFF CACHE BOOL "define for eigen")
+  MARK_AS_ADVANCED(__MATRIXWRAPPER_EIGEN__)
+ENDIF (NOT __MATRIXWRAPPER_EIGEN__)
+SET(__MATRIXWRAPPER_EIGEN__ OFF)
 
 # install path
 # ------------
 IF(NOT MATRIX_LIB)
-  SET( MATRIX_LIB boost CACHE STRING "Which matrix library to use: lti, newmat or boost")
+  SET( MATRIX_LIB boost CACHE STRING "Which matrix library to use: lti, newmat, boost or eigen")
 ENDIF(NOT MATRIX_LIB)
 MESSAGE("Searching for matrix lib ${MATRIX_LIB}")
 
@@ -62,7 +67,7 @@ IF (MATRIX_LIB STREQUAL "lti")
     MESSAGE( "-- Lti libs     ${MATRIX_LIBS}")
     SET(__MATRIXWRAPPER_LTI__ ON)	
   ELSE ( LTI AND LTI_FOUND )
-    MESSAGE(FATAL ERROR "Looking for Lti in - not found")
+    MESSAGE(FATAL_ERROR "Looking for Lti in - not found")
   ENDIF ( LTI AND LTI_FOUND )
 ELSE (MATRIX_LIB STREQUAL "lti")
 
@@ -77,13 +82,31 @@ IF (MATRIX_LIB STREQUAL "boost")
     MESSAGE( "-- Boost libs     ${MATRIX_LIBS}")
     SET(__MATRIXWRAPPER_BOOST__ ON)	
   ELSE ( BOOST_FOUND )
-    MESSAGE(FATAL ERROR "Looking for Boost in - not found")
+    MESSAGE(FATAL_ERROR "Looking for Boost in - not found")
   ENDIF ( BOOST_FOUND )
 ELSE (MATRIX_LIB STREQUAL "boost")
 
 
-MESSAGE( FATAL_ERROR "No valid matrix lib specified. Please choose lti, newmat or boost")
+IF (MATRIX_LIB STREQUAL "eigen")
+  IF ( NOT EIGEN_INCLUDE )
+    FIND_PATH(EIGEN_FOUND Eigen/Core)
+    IF ( EIGEN_FOUND )
+      MESSAGE("-- Looking for Eigen - found")
+      SET( EIGEN_INCLUDE "${EIGEN_FOUND}")
+      SET( MATRIX_LIBS "")
+    ELSE ( EIGEN_FOUND )
+      MESSAGE(FATAL_ERROR "Looking for Eigen in - not found")
+    ENDIF ( EIGEN_FOUND )
+  ENDIF ( NOT EIGEN_INCLUDE )
+
+  SET(__MATRIXWRAPPER_EIGEN__ ON)
+  SET( MATRIX_INCLUDE "${EIGEN_INCLUDE}")
+  MESSAGE( "-- Eigen includes ${EIGEN_INCLUDE}")
+ELSE (MATRIX_LIB STREQUAL "eigen")
 
+MESSAGE( FATAL_ERROR "No valid matrix lib specified. Please choose lti, newmat, boost or eigen")
+
+ENDIF (MATRIX_LIB STREQUAL "eigen")
 ENDIF (MATRIX_LIB STREQUAL "boost")
 ENDIF (MATRIX_LIB STREQUAL "lti")
 ENDIF (MATRIX_LIB STREQUAL "newmat")
diff -rupN a/src/wrappers/config.h.in b/src/wrappers/config.h.in
--- src/wrappers/config.h.in	2013-06-19 20:38:11.531763284 +0200
+++ src/wrappers/config.h.in	2013-06-19 20:38:24.935594774 +0200
@@ -4,6 +4,7 @@
 #cmakedefine __MATRIXWRAPPER_NEWMAT__
 #cmakedefine __MATRIXWRAPPER_LTI__
 #cmakedefine __MATRIXWRAPPER_BOOST__
+#cmakedefine __MATRIXWRAPPER_EIGEN__
 
 #cmakedefine __RNGWRAPPER_BOOST__
 #cmakedefine __RNGWRAPPER_LTI__
diff -rupN a/src/wrappers/matrix/CMakeLists.txt b/src/wrappers/matrix/CMakeLists.txt
--- src/wrappers/matrix/CMakeLists.txt	2013-06-19 20:38:11.531763284 +0200
+++ src/wrappers/matrix/CMakeLists.txt	2013-06-19 20:38:24.935594774 +0200
@@ -2,9 +2,11 @@ GLOBAL_ADD_INCLUDE_DIR( ${PROJECT_SOURCE
 GLOBAL_ADD_INCLUDE_DIR( ${PROJECT_BINARY_DIR}/src/wrappers/matrix )
 GLOBAL_ADD_INCLUDE_DIR( ${MATRIX_INCLUDE} )
 GLOBAL_ADD_INCLUDE( bfl/wrappers/matrix matrix_wrapper.h vector_wrapper.h matrix_BOOST.h vector_BOOST.h
-                                        matrix_NEWMAT.h vector_NEWMAT.h matrix_LTI.h vector_LTI.h)
+                                        matrix_NEWMAT.h vector_NEWMAT.h matrix_LTI.h vector_LTI.h
+                                        matrix_EIGEN.h vector_EIGEN.h)
 GLOBAL_ADD_SRC ( wrappers/matrix/matrix_BOOST.cpp  wrappers/matrix/vector_BOOST.cpp
                  wrappers/matrix/matrix_NEWMAT.cpp wrappers/matrix/vector_NEWMAT.cpp  
                  wrappers/matrix/matrix_LTI.cpp wrappers/matrix/vector_LTI.cpp  
+                 wrappers/matrix/matrix_EIGEN.cpp wrappers/matrix/vector_EIGEN.cpp
                  wrappers/matrix/matrix_wrapper.cpp )
 
diff -rupN a/src/wrappers/matrix/matrix_EIGEN.cpp b/src/wrappers/matrix/matrix_EIGEN.cpp
--- src/wrappers/matrix/matrix_EIGEN.cpp	1970-01-01 01:00:00.000000000 +0100
+++ src/wrappers/matrix/matrix_EIGEN.cpp	2013-06-19 20:38:24.935594774 +0200
@@ -0,0 +1,512 @@
+#include "../config.h"
+#ifdef __MATRIXWRAPPER_EIGEN__
+
+#include "matrix_EIGEN.h"
+#include "vector_EIGEN.h"
+
+#include <Eigen/LU>
+
+using namespace std;
+
+// Passing the constructor arguments...
+MyMatrix::Matrix() : EigenMatrix() {}
+MyMatrix::Matrix(int num_rows, int num_cols) : EigenMatrix(num_rows,
+							   num_cols){}
+
+// Destructor
+MyMatrix::~Matrix(){}
+
+// Copy constructor
+MyMatrix::Matrix(const MyMatrix& a) : EigenMatrix(a){}
+
+// ill-designed
+MyMatrix::Matrix(const EigenMatrix & a) : EigenMatrix(a){}
+
+MyMatrix::Matrix(int num_rows,const RowVector& v):EigenMatrix(num_rows,v.columns()){
+  EigenMatrix & m = *this;
+  const EigenRowVector & r = v;
+  for(unsigned int i=0;i<num_rows;i++)
+    m.row(i) = r;
+}
+
+MyRowVector MyMatrix::operator[](unsigned int i) const{
+  return this->rowCopy(i);
+}
+
+// Size/Capacity
+unsigned int MyMatrix::size() const { return this->rows();}
+unsigned int MyMatrix::capacity() const { return this->rows();}
+
+// Number of Rows/Cols
+unsigned int MyMatrix::rows() const { return ((const EigenMatrix *)this)->rows();}
+unsigned int MyMatrix::columns() const { return ((const EigenMatrix *)this)->cols();}
+
+// MATRIX - SCALAR operators
+MyMatrix& MyMatrix::operator+= (double a)
+{
+  EigenMatrix & op1 = *this;
+  op1 += EigenMatrix::Constant(op1.rows(), op1.cols(), a);
+  return (MyMatrix&)op1;
+}
+
+MyMatrix& MyMatrix::operator-= (double a)
+{
+  EigenMatrix & op1 = (*this);
+  op1 -= EigenMatrix::Constant(op1.rows(), op1.cols(), a);
+  return (MyMatrix&) op1;
+}
+
+MyMatrix& MyMatrix::operator*= (double a)
+{
+  EigenMatrix & op1 = (*this);
+  op1 *= a;
+  return *this;
+}
+
+MyMatrix& MyMatrix::operator/= (double a)
+{
+  EigenMatrix & op1 = (*this);
+  op1 /= a;
+  return (MyMatrix&) op1;
+}
+
+MyMatrix MyMatrix::operator+ (double a) const
+{
+  return (MyMatrix)(((EigenMatrix)(*this)) + EigenMatrix::Constant(rows(), cols(), a));
+}
+
+MyMatrix MyMatrix::operator- (double a) const
+{
+  return (MyMatrix)(((EigenMatrix)(*this)) - EigenMatrix::Constant(rows(), cols(), a));
+}
+
+MyMatrix MyMatrix::operator* (double a) const
+{
+  const EigenMatrix& op1 = (*this);
+  return (MyMatrix) (op1 *  a);
+}
+
+MyMatrix MyMatrix::operator/ (double a) const
+{
+  const EigenMatrix& op1 = (*this);
+  return (MyMatrix) (op1 /  a);
+}
+
+MyMatrix&
+MyMatrix::operator =(const MySymmetricMatrix& a)
+{
+  *this =(MyMatrix) a;
+
+  return *this;
+}
+
+// MATRIX - MATRIX Operators
+MyMatrix MyMatrix::operator- (const MyMatrix& a) const
+{
+  const EigenMatrix& op1 = *this;
+  const EigenMatrix& op2 = a;
+
+  return (MyMatrix)(op1 - op2);
+}
+
+MyMatrix MyMatrix::operator+ (const MyMatrix& a) const
+{
+  const EigenMatrix& op1 = *this;
+  const EigenMatrix& op2 = a;
+
+  return (MyMatrix)(op1 + op2);
+}
+
+MyMatrix MyMatrix::operator* (const MyMatrix& a) const
+{
+  const EigenMatrix& op1 = *this;
+  const EigenMatrix& op2 = a;
+
+  return (MyMatrix)(op1 * op2);
+}
+
+MyMatrix & MyMatrix::operator+= (const MyMatrix& a)
+{
+  EigenMatrix & op1 = (*this);
+  const EigenMatrix & op2 = a;
+  op1 += op2;
+  return (MyMatrix &) op1;
+}
+
+MyMatrix & MyMatrix::operator-= (const MyMatrix& a)
+{
+  EigenMatrix & op1 = (*this);
+  const EigenMatrix & op2 = a;
+  op1 -= op2;
+  return (MyMatrix &) op1;
+}
+
+
+// MATRIX - VECTOR Operators
+MyColumnVector MyMatrix::operator* (const MyColumnVector &b) const
+{
+  const EigenMatrix& op1 = (*this);
+  return (MyColumnVector) (op1 * ((const EigenColumnVector&)b));
+}
+
+
+
+double& MyMatrix::operator()(unsigned int a, unsigned int b)
+{
+  EigenMatrix & op1 = (*this);
+  return op1(a-1,b-1);
+}
+
+double MyMatrix::operator()(unsigned int a, unsigned int b) const
+{
+  const EigenMatrix & op1(*this);
+  return op1(a-1,b-1);
+}
+
+bool MyMatrix::operator==(const MyMatrix& a) const
+{
+  if (this->rows() != a.rows()) return false;
+  if (this->columns() != a.columns()) return false;
+  return(((EigenMatrix)(*this)-(EigenMatrix)a).isApproxToConstant(0.0));
+}
+
+
+// Set all elements equal to a
+MyMatrix&
+ MyMatrix::operator=(double a)
+{
+  ((EigenMatrix&)(*this)).setConstant(a);
+  return *this;
+}
+
+
+MyRowVector MyMatrix::rowCopy(unsigned int r) const
+{
+  return (MyRowVector) (*this).row(r);
+}
+
+MyColumnVector MyMatrix::columnCopy(unsigned int c) const
+{
+  return (MyColumnVector) (*this).col(c);
+}
+
+
+
+
+MyMatrix MyMatrix::transpose() const
+{
+  const EigenMatrix &op1 = (*this);
+  return (MyMatrix) op1.transpose();
+}
+
+double MyMatrix::determinant() const
+{
+  unsigned int r = this->rows();
+  assert(r == this->columns());
+  const EigenMatrix& A = (*this);
+  return A.determinant();
+}
+
+
+MyMatrix MyMatrix::inverse() const
+{
+  unsigned int r = this->rows();
+  assert(r == this->columns());
+  const EigenMatrix& A = (*this);
+  return (MyMatrix) A.inverse();
+}
+
+
+int
+MyMatrix::convertToSymmetricMatrix(MySymmetricMatrix& sym)
+{
+  // test if matrix is square matrix
+  assert(this->rows() == this->columns());
+
+  const EigenMatrix & A = (EigenMatrix &) (*this);
+  sym = MySymmetricMatrix(A.selfadjointView<Eigen::Upper>());
+  return 0;
+}
+
+void
+MyMatrix::resize(unsigned int i, unsigned int j, bool copy, bool initialize)
+{
+  EigenMatrix & temp = (EigenMatrix &) (*this);
+  temp.resize(i,j);
+}
+
+// get sub matrix
+MyMatrix MyMatrix::sub(int i_start, int i_end, int j_start , int j_end) const
+{
+  const EigenMatrix & A = (EigenMatrix &) (*this);
+  MyMatrix submatrix(A.block(i_start-1,j_start-1,i_end-i_start+1,j_end-j_start+1));
+  return submatrix;
+}
+
+/////////////////////////////
+// CLASS SYMMETRIC MATRIX  //
+/////////////////////////////
+
+MySymmetricMatrix::SymmetricMatrix() : EigenSymmetricMatrix() {}
+MySymmetricMatrix::SymmetricMatrix(int n) : EigenSymmetricMatrix(n,n) {}
+MySymmetricMatrix::SymmetricMatrix(int num_rows,const RowVector& v):EigenSymmetricMatrix(num_rows,v.columns()){
+  EigenSymmetricMatrix & m = *this;
+  const EigenRowVector & r = v;
+  for(unsigned int i=0;i<num_rows;i++)
+    m.row(i) = r;
+}
+
+MyRowVector MySymmetricMatrix::operator[](unsigned int i) const{
+  return this->rowCopy(i);
+}
+
+
+
+// Copy constructor
+MySymmetricMatrix::SymmetricMatrix(const SymmetricMatrix& a) : EigenSymmetricMatrix(a){}
+MySymmetricMatrix::SymmetricMatrix(const EigenSymmetricMatrix& a) : EigenSymmetricMatrix(a){}
+MySymmetricMatrix::SymmetricMatrix(const EigenSymmetricView & a) : EigenSymmetricMatrix(a){}
+
+// Destructor
+MySymmetricMatrix::~SymmetricMatrix(){}
+
+// Size/Capacity
+unsigned int MySymmetricMatrix::size() const { return this->rows();}
+unsigned int MySymmetricMatrix::capacity() const { return this->rows();}
+
+// Ask Number of Rows and Columns
+unsigned int MySymmetricMatrix::rows() const { return ((const EigenSymmetricMatrix *)this)->rows();}
+unsigned int MySymmetricMatrix::columns() const { return ((const EigenSymmetricMatrix *)this)->cols();}
+
+
+MyRowVector MySymmetricMatrix::rowCopy(unsigned int r) const
+{
+  
+  unsigned int cols = columns();
+  EigenRowVector temp(cols);
+  for (unsigned int i=0; i<cols; i++)
+    temp(i) = (*this)(r,i+1);
+  return (MyRowVector) temp;
+}
+
+MySymmetricMatrix MySymmetricMatrix::transpose() const {return (*this);}
+
+MySymmetricMatrix MySymmetricMatrix::inverse() const
+{
+  unsigned int r = this->rows();
+  assert(r == this->columns());
+  const EigenSymmetricMatrix& A = (*this);
+  // EigenSymmetricView A = ((const EigenSymmetricMatrix *)(this))->selfadjointView<Eigen::Upper>();
+  return MySymmetricMatrix(A.inverse());
+}
+
+double MySymmetricMatrix::determinant() const
+{
+  unsigned int r = this->rows();
+  assert(r == this->columns());
+  const EigenSymmetricMatrix& A = (*this);
+  // EigenSymmetricView A = ((const EigenSymmetricMatrix *)(this))->selfadjointView<Eigen::Upper>();
+  return A.determinant();
+}
+
+
+// Set all elements equal to a
+MySymmetricMatrix& MySymmetricMatrix::operator=(const double a)
+{
+  ((EigenSymmetricMatrix&)(*this)).setConstant(a);
+  return *this;
+}
+
+
+// SYMMETRICMATRIX - SCALAR operators
+MySymmetricMatrix& MySymmetricMatrix::operator +=(double a)
+{
+  EigenSymmetricMatrix & op1 = *this;
+  op1 += EigenSymmetricMatrix::Constant(op1.rows(), op1.cols(), a);
+  return (MySymmetricMatrix&)op1;
+}
+
+MySymmetricMatrix& MySymmetricMatrix::operator -=(double a)
+{
+  EigenSymmetricMatrix & op1 = *this;
+  op1 -= EigenSymmetricMatrix::Constant(op1.rows(), op1.cols(), a);
+  return (MySymmetricMatrix&)op1;
+}
+
+MySymmetricMatrix& MySymmetricMatrix::operator *=(double b)
+{
+  EigenSymmetricMatrix & op1 = (*this);
+  op1 *= b;
+  return (MySymmetricMatrix&) op1;
+}
+
+MySymmetricMatrix& MySymmetricMatrix::operator /=(double b)
+{
+  EigenSymmetricMatrix & op1 = (*this);
+  op1 /= b;
+  return (MySymmetricMatrix&) op1;
+}
+
+MySymmetricMatrix MySymmetricMatrix::operator +(double a) const
+{
+  return (MySymmetricMatrix)(((EigenSymmetricMatrix)(*this)) + EigenSymmetricMatrix::Constant(rows(), cols(), a));
+}
+
+MySymmetricMatrix MySymmetricMatrix::operator -(double a) const
+{
+  return (MySymmetricMatrix)(((EigenSymmetricMatrix)(*this)) - EigenSymmetricMatrix::Constant(rows(), cols(), a));
+}
+
+MySymmetricMatrix MySymmetricMatrix::operator *(double b) const
+{
+ const EigenSymmetricMatrix& op1 = (*this);
+  return (MySymmetricMatrix) (op1 *  b);
+}
+
+MySymmetricMatrix MySymmetricMatrix::operator /(double b) const
+{
+  const EigenSymmetricMatrix& op1 = (*this);
+  return (MySymmetricMatrix) (op1 /  b);
+}
+
+
+
+
+// SYMMETRICMATRIX - MATRIX operators
+MyMatrix& MySymmetricMatrix::operator +=(const MyMatrix& a)
+{
+  EigenSymmetricMatrix & op1 = (*this);
+  op1 += a;
+  return (MyMatrix &) op1;
+}
+
+MyMatrix& MySymmetricMatrix::operator -=(const MyMatrix& a)
+{
+  EigenSymmetricMatrix & op1 = (*this);
+  op1 -= a;
+  return (MyMatrix &) op1;
+}
+
+
+MyMatrix MySymmetricMatrix::operator+ (const MyMatrix &a) const
+{
+  const EigenSymmetricMatrix& op1 = *this;
+  const EigenMatrix& op2 = a;
+
+  return (MyMatrix) (op1 + op2);
+}
+
+MyMatrix MySymmetricMatrix::operator- (const MyMatrix &a) const
+{
+  const EigenSymmetricMatrix& op1 = *this;
+  const EigenMatrix& op2 = a;
+
+  return (MyMatrix) (op1 - op2);
+}
+
+MyMatrix MySymmetricMatrix::operator* (const MyMatrix &a) const
+{
+  const EigenSymmetricMatrix& op1 = *this;
+  const EigenMatrix& op2 = a;
+
+  return (MyMatrix) (op1 * op2);
+}
+
+
+
+// SYMMETRICMATRIX - SYMMETRICMATRIX operators
+MySymmetricMatrix& MySymmetricMatrix::operator +=(const MySymmetricMatrix& a)
+{
+  EigenSymmetricMatrix & op1 = (*this);
+  const EigenSymmetricMatrix & op2 = a;
+  op1 += op2;
+  return (MySymmetricMatrix &) op1;
+}
+
+MySymmetricMatrix& MySymmetricMatrix::operator -=(const MySymmetricMatrix& a)
+{
+  EigenSymmetricMatrix & op1 = (*this);
+  const EigenSymmetricMatrix & op2 = a;
+  op1 -= op2;
+  return (MySymmetricMatrix &) op1;
+}
+
+MySymmetricMatrix MySymmetricMatrix::operator+ (const MySymmetricMatrix &a) const
+{
+  const EigenSymmetricMatrix& op1 = *this;
+  const EigenSymmetricMatrix& op2 = a;
+
+  return (MySymmetricMatrix) (op1 + op2);
+}
+
+MySymmetricMatrix MySymmetricMatrix::operator- (const MySymmetricMatrix &a) const
+{
+  const EigenSymmetricMatrix& op1 = *this;
+  const EigenSymmetricMatrix& op2 = a;
+
+  return (MySymmetricMatrix) (op1 - op2);
+}
+
+MyMatrix MySymmetricMatrix::operator* (const MySymmetricMatrix &a) const
+{
+  const EigenSymmetricMatrix& op1 = *this;
+  const EigenSymmetricMatrix& op2 = a;
+
+  return (MyMatrix) (op1 * op2);
+}
+
+
+
+
+MyColumnVector MySymmetricMatrix::operator* (const MyColumnVector &b) const
+{
+  const EigenSymmetricMatrix& op1 = (EigenSymmetricMatrix) *this;
+  return (MyColumnVector) (op1 * ((const EigenColumnVector&)b));
+}
+
+void MySymmetricMatrix::multiply (const MyColumnVector &b, MyColumnVector &result) const
+{
+  const EigenSymmetricMatrix& op1 = (EigenSymmetricMatrix) *this;
+  result = (MyColumnVector) (op1 * ((const EigenColumnVector&)b));
+}
+
+MyMatrix MySymmetricMatrix::sub(int i_start, int i_end, int j_start , int j_end) const
+{
+  MyMatrix submatrix(i_end-i_start+1, j_end-j_start+1);
+  for (int i=i_start; i<=i_end; i++)
+    for (int j=j_start; j<=j_end; j++)
+      submatrix(i-i_start+1,j-j_start+1) = (*this)(i,j);
+
+  return submatrix;
+}
+
+
+
+double& MySymmetricMatrix::operator()(unsigned int a, unsigned int b)
+{
+  EigenSymmetricMatrix & op1 = (*this);
+  return op1(a-1,b-1);
+}
+
+double MySymmetricMatrix::operator()(unsigned int a, unsigned int b) const
+{
+  const EigenSymmetricMatrix & op1(*this);
+  return op1(a-1,b-1);
+}
+
+bool MySymmetricMatrix::operator==(const MySymmetricMatrix& a) const
+{
+  if (this->rows() != a.rows()) return false;
+  if (this->columns() != a.columns()) return false;
+  return(((EigenSymmetricMatrix)(*this)-(EigenSymmetricMatrix)a).isApproxToConstant(0.0));
+}
+
+void
+MySymmetricMatrix::resize(unsigned int i, bool copy, bool initialize)
+{
+  EigenSymmetricMatrix & temp = (EigenSymmetricMatrix &) (*this);
+  temp.resize(i,i);
+}
+
+
+#endif
diff -rupN a/src/wrappers/matrix/matrix_EIGEN.h b/src/wrappers/matrix/matrix_EIGEN.h
--- src/wrappers/matrix/matrix_EIGEN.h	1970-01-01 01:00:00.000000000 +0100
+++ src/wrappers/matrix/matrix_EIGEN.h	2013-06-19 20:38:24.935594774 +0200
@@ -0,0 +1,168 @@
+#include "../config.h"
+#ifdef __MATRIXWRAPPER_EIGEN__
+
+#ifndef __MATRIX_EIGEN__
+#define __MATRIX_EIGEN__
+#include "../../bfl_constants.h"
+#include "matrix_wrapper.h"
+#include "vector_wrapper.h"
+
+#include <Eigen/Core>
+#include <assert.h>
+
+typedef Eigen::MatrixXd EigenMatrix;
+typedef Eigen::MatrixXd EigenSymmetricMatrix;
+typedef Eigen::MatrixXd::ConstSelfAdjointViewReturnType<Eigen::Upper>::Type EigenSymmetricView;
+
+namespace MatrixWrapper
+{
+
+/// Implementation of Matrixwrapper using Eigen
+class Matrix : public EigenMatrix, public Matrix_Wrapper
+{
+ private: // No private members:  We don't add anything.
+
+ public: // Public Members
+
+  // Constructors
+  Matrix();
+  Matrix(int m, int n);
+
+  // Destructor
+  virtual ~Matrix();
+
+  // Copy constructor
+  Matrix (const MyMatrix& a);
+  Matrix(const EigenMatrix & a);
+
+  Matrix(int num_rows,const RowVector& v);
+
+  
+  virtual unsigned int size() const;
+  virtual unsigned int capacity() const;
+  virtual unsigned int rows() const;
+  virtual unsigned int columns() const;
+  virtual double& operator()(unsigned int,unsigned int);
+  virtual double operator()(unsigned int,unsigned int) const;
+  virtual RowVector operator[](unsigned int)const;
+
+  using EigenMatrix::operator ==;
+  using EigenMatrix::operator =;
+  using EigenMatrix::operator +=;
+  using EigenMatrix::operator -=;
+  using EigenMatrix::operator +;
+  using EigenMatrix::operator -;
+
+  virtual bool operator==(const MyMatrix& a) const;
+
+  virtual MyMatrix& operator =(double a);
+
+  virtual MyMatrix& operator +=(double a);
+  virtual MyMatrix& operator -=(double a);
+  virtual MyMatrix& operator *=(double b);
+  virtual MyMatrix& operator /=(double b);
+  virtual MyMatrix operator+ (double b) const;
+  virtual MyMatrix operator- (double b) const;
+  virtual MyMatrix operator* (double b) const;
+  virtual MyMatrix operator/ (double b) const;
+
+  virtual MyMatrix& operator =(const MySymmetricMatrix& a);
+  virtual MyMatrix& operator +=(const MyMatrix& a);
+  virtual MyMatrix& operator -=(const MyMatrix& a);
+  virtual MyMatrix operator+ (const MyMatrix &a) const;
+  virtual MyMatrix operator- (const MyMatrix &a) const;
+  virtual MyMatrix operator* (const MyMatrix &a) const;
+
+  virtual MyColumnVector operator* ( const MyColumnVector &b) const;
+
+  virtual MyRowVector rowCopy(unsigned int r) const;
+  virtual MyColumnVector columnCopy(unsigned int c) const;
+
+  virtual void resize(unsigned int i, unsigned int j,
+		      bool copy=true, bool initialize=true);
+  virtual MyMatrix inverse() const;
+  virtual MyMatrix transpose() const;
+  virtual double determinant() const;
+  virtual int convertToSymmetricMatrix(MySymmetricMatrix& sym);
+  virtual MyMatrix sub(int i_start, int i_end, int j_start , int j_end) const;
+
+};
+
+class SymmetricMatrix : public EigenSymmetricMatrix, public SymmetricMatrix_Wrapper
+{
+ private: //
+
+ public: //
+  // Constructors
+  SymmetricMatrix();
+  SymmetricMatrix(int n);
+
+  // Copy constructors
+  SymmetricMatrix(const MySymmetricMatrix& a);
+  SymmetricMatrix(const EigenSymmetricMatrix& a);
+  SymmetricMatrix(const EigenSymmetricView & a);
+
+  SymmetricMatrix(int num_rows,const RowVector& v);
+
+  // Destructor
+  virtual ~SymmetricMatrix();
+
+  virtual unsigned int size() const;
+  virtual unsigned int capacity() const;
+  virtual unsigned int rows() const;
+  virtual unsigned int columns() const;
+  virtual MySymmetricMatrix inverse() const;
+  virtual MySymmetricMatrix transpose() const;
+  virtual double determinant() const;
+
+  virtual double& operator()(unsigned int,unsigned int);
+  virtual double operator()(unsigned int,unsigned int) const;
+  virtual RowVector operator[](unsigned int)const;
+
+  using EigenSymmetricMatrix::operator ==;
+  using EigenSymmetricMatrix::operator =;
+  using EigenSymmetricMatrix::operator +=;
+  using EigenSymmetricMatrix::operator -=;
+  using EigenSymmetricMatrix::operator +;
+  using EigenSymmetricMatrix::operator -;
+
+  virtual bool operator==(const MySymmetricMatrix& a) const;
+
+  virtual MySymmetricMatrix& operator=(double a);
+
+  virtual MySymmetricMatrix& operator +=(double a);
+  virtual MySymmetricMatrix& operator -=(double a);
+  virtual MySymmetricMatrix& operator *=(double b);
+  virtual MySymmetricMatrix& operator /=(double b);
+  virtual MySymmetricMatrix  operator + (double b) const;
+  virtual MySymmetricMatrix  operator - (double b) const;
+  virtual MySymmetricMatrix  operator * (double b) const;
+  virtual MySymmetricMatrix  operator / (double b) const;
+
+  virtual MyRowVector rowCopy(unsigned int r) const;
+
+  virtual MyMatrix& operator +=(const MyMatrix& a);
+  virtual MyMatrix& operator -=(const MyMatrix& a);
+  virtual MyMatrix operator  + (const MyMatrix &a) const;
+  virtual MyMatrix operator  - (const MyMatrix &a) const;
+  virtual MyMatrix operator  * (const MyMatrix &a) const;
+
+  virtual MySymmetricMatrix& operator +=(const MySymmetricMatrix& a);
+  virtual MySymmetricMatrix& operator -=(const MySymmetricMatrix& a);
+  virtual MySymmetricMatrix  operator + (const MySymmetricMatrix &a) const;
+  virtual MySymmetricMatrix  operator - (const MySymmetricMatrix &a) const;
+  virtual MyMatrix  operator * (const MySymmetricMatrix& a) const;
+
+  virtual MyColumnVector operator* (const MyColumnVector &b) const;
+  virtual void multiply (const MyColumnVector &b, MyColumnVector &result) const;
+
+  virtual void resize(unsigned int i, bool copy=true, bool initialize=true);
+  virtual MyMatrix sub(int i_start, int i_end, int j_start , int j_end) const;
+
+};
+
+}
+
+#endif
+
+#endif
diff -rupN a/src/wrappers/matrix/matrix_wrapper.h b/src/wrappers/matrix/matrix_wrapper.h
--- src/wrappers/matrix/matrix_wrapper.h	2013-06-19 20:38:11.531763284 +0200
+++ src/wrappers/matrix/matrix_wrapper.h	2013-06-19 20:38:24.935594774 +0200
@@ -291,6 +291,7 @@ public:
 #include "matrix_NEWMAT.h"
 #include "matrix_LTI.h"
 #include "matrix_BOOST.h"
+#include "matrix_EIGEN.h"
 
 
 #endif // __MATRIX_WRAPPER__
diff -rupN a/src/wrappers/matrix/vector_EIGEN.cpp b/src/wrappers/matrix/vector_EIGEN.cpp
--- src/wrappers/matrix/vector_EIGEN.cpp	1970-01-01 01:00:00.000000000 +0100
+++ src/wrappers/matrix/vector_EIGEN.cpp	2013-06-19 20:38:24.935594774 +0200
@@ -0,0 +1,389 @@
+#include "../config.h"
+#ifdef __MATRIXWRAPPER_EIGEN__
+
+#include "vector_EIGEN.h"
+#include <iostream>
+
+
+// Constructors
+MyColumnVector::ColumnVector() : EigenColumnVector() {}
+MyColumnVector::ColumnVector(int num_rows) : EigenColumnVector(num_rows){}
+MyColumnVector::ColumnVector(int num_rows,double value) : EigenColumnVector(num_rows){
+  ((EigenColumnVector*)this)->setConstant(value);
+}
+MyColumnVector::ColumnVector(const MyColumnVector& a, const MyColumnVector& b) : EigenColumnVector(a.rows() + b.rows())
+{
+  EigenColumnVector& opl = (*this);
+  opl.head(a.rows()) = (const EigenColumnVector &)(a);
+  opl.tail(b.rows()) = (const EigenColumnVector &)(b);
+}
+
+// Destructor
+MyColumnVector::~ColumnVector(){}
+
+// Copy constructor
+MyColumnVector::ColumnVector(const MyColumnVector& a) :
+  EigenColumnVector(a){}
+MyColumnVector::ColumnVector(const EigenColumnVector & a) :
+  EigenColumnVector(a){}
+
+// Resizing
+void MyColumnVector::resize(int num_rows)
+{
+  EigenColumnVector & op1 = (*this);
+  op1.resize(num_rows);
+}
+
+// Assign
+void MyColumnVector::assign(int num_rows, double value)
+{
+  EigenColumnVector & op1 = (*this);
+  op1.resize(num_rows);
+  op1.setConstant(value);
+}
+
+// Number of Rows / Cols
+unsigned int MyColumnVector::rows() const { return ((const EigenColumnVector *)this)->rows();}
+unsigned int MyColumnVector::columns() const { return ((const EigenColumnVector *)this)->cols();}
+unsigned int MyColumnVector::capacity() const { return ((const EigenColumnVector *)this)->size();}
+
+MyColumnVector
+MyColumnVector::vectorAdd(const MyColumnVector& v2) const
+{
+  const MyColumnVector& v1 = *this;
+  MyColumnVector res(v1.rows() + v2.rows());
+  EigenColumnVector& opl = res;
+  opl.head(v1.rows()) = (const EigenColumnVector &)(v1);
+  opl.tail(v2.rows()) = (const EigenColumnVector &)(v2);
+
+  return res;
+}
+
+double& MyColumnVector::operator()(unsigned int i)
+{
+  //std::cout << "(BOOSTVECTOR) operator() called" << std::endl;
+  EigenColumnVector& op1 = *(this);
+  return op1(i-1);
+}
+
+double MyColumnVector::operator()(unsigned int i) const
+{
+  //std::cout << "(BOOSTVECTOR) operator() called" << std::endl;
+  const EigenColumnVector op1 = (*this);
+  return op1(i-1);
+}
+
+
+bool MyColumnVector::operator==(const MyColumnVector& a) const
+{
+  if (this->rows() != a.rows()) return false;
+  return(((EigenColumnVector)(*this)-(EigenColumnVector)a).isApproxToConstant(0.0));
+}
+
+// Operators
+MyColumnVector & MyColumnVector::operator+= (const MyColumnVector& a)
+{
+  EigenColumnVector & op1 = (*this);
+  const EigenColumnVector & op2 = a;
+  op1 += op2;
+  return (MyColumnVector &) op1;
+}
+
+MyColumnVector & MyColumnVector::operator-= (const MyColumnVector& a)
+{
+  EigenColumnVector & op1 = (*this);
+  const EigenColumnVector & op2 = a;
+  op1 -= op2;
+  return (MyColumnVector &) op1;
+}
+
+MyColumnVector MyColumnVector::operator+ (const MyColumnVector &a) const
+{
+  return (MyColumnVector) ((EigenColumnVector)(*this) + (EigenColumnVector)a);
+}
+
+MyColumnVector MyColumnVector::operator- (const MyColumnVector &a) const
+{
+  return (MyColumnVector) ((EigenColumnVector)(*this) - (EigenColumnVector)a);
+}
+
+
+
+MyColumnVector& MyColumnVector::operator+= (double a)
+{
+  EigenColumnVector & op1 = *this;
+  op1 += EigenColumnVector::Constant(rows(), a);
+  return (MyColumnVector&)op1;
+}
+
+MyColumnVector& MyColumnVector::operator-= (double a)
+{
+  EigenColumnVector & op1 = *this;
+  op1 -= EigenColumnVector::Constant(rows(), a);
+  return (MyColumnVector&)op1;
+}
+
+MyColumnVector& MyColumnVector::operator*= (double a)
+{
+  EigenColumnVector& op1 = *this;
+  op1 *= a;
+  return (MyColumnVector&) op1;
+}
+
+MyColumnVector& MyColumnVector::operator/= (double a)
+{
+  EigenColumnVector& op1 = *this;
+  op1 /= a;
+  return (MyColumnVector&) op1;
+}
+
+
+MyColumnVector MyColumnVector::operator+ (double a) const
+{
+  return (MyColumnVector)(((EigenColumnVector)(*this)) + EigenColumnVector::Constant(rows(), a));
+}
+
+MyColumnVector MyColumnVector::operator- (double a) const
+{
+  return (MyColumnVector)(((EigenColumnVector)(*this)) - EigenColumnVector::Constant(rows(), a));
+}
+
+MyColumnVector MyColumnVector::operator* (double a) const
+{
+  const EigenColumnVector & op1 = (*this);
+  return (MyColumnVector) (op1 * a);
+}
+
+MyColumnVector MyColumnVector::operator/ (double a) const
+{
+  const EigenColumnVector & op1 = (*this);
+  return (MyColumnVector) (op1 / a);
+}
+
+
+
+MyRowVector MyColumnVector::transpose() const
+{
+  const EigenColumnVector & op1 = (*this);
+  return MyRowVector(op1.transpose());
+}
+
+MyMatrix MyColumnVector::operator* (const MyRowVector &a) const
+{
+  const EigenColumnVector & op1 = (*this);
+  const EigenRowVector & op2 = a;
+
+  return MyMatrix(op1 * op2);
+}
+
+MyColumnVector&
+MyColumnVector::operator=(const MyColumnVector &a)
+{
+  EigenColumnVector& op1 = *this;
+  op1 = (EigenColumnVector)a;
+  return *this;
+}
+
+MyColumnVector&
+MyColumnVector::operator=(double a)
+{
+  EigenColumnVector& op1 = *this;
+  op1.setConstant(a);
+  return *this;
+}
+
+MyColumnVector MyColumnVector::sub(int j_start , int j_end) const
+{
+  const EigenColumnVector& op1 = *this;
+  return MyColumnVector(op1.segment(j_start-1,j_end-j_start+1));
+}
+
+
+
+//////////////////////////////////////////////////////////////////////
+////////////////////////////// ROWVECTOR /////////////////////////////
+//////////////////////////////////////////////////////////////////////
+
+// Constructors
+MyRowVector::RowVector() : EigenRowVector() {}
+MyRowVector::RowVector(int num_cols) : EigenRowVector(num_cols){}
+MyRowVector::RowVector(int num_cols,double value) : EigenRowVector(num_cols){
+  ((EigenRowVector*)this)->setConstant(value);
+}
+
+// Destructor
+MyRowVector::~RowVector(){}
+
+// Copy constructor
+MyRowVector::RowVector(const MyRowVector& a) :
+  EigenRowVector(a){}
+MyRowVector::RowVector(const EigenRowVector & a) :
+  EigenRowVector(a){}
+
+// Resizing
+void MyRowVector::resize(int num_columns)
+{
+  EigenRowVector & op1 = (*this);
+  op1.resize(num_columns);
+}
+
+// Assign
+void MyRowVector::assign(int num_columns, double value)
+{
+  EigenRowVector & op1 = (*this);
+  op1.resize(num_columns);
+  op1.setConstant(value);
+}
+
+// Number of Rows / Cols
+unsigned int MyRowVector::rows() const { return ((const EigenRowVector *)this)->rows();}
+unsigned int MyRowVector::columns() const { return ((const EigenRowVector *)this)->cols();}
+unsigned int MyRowVector::capacity() const { return ((const EigenRowVector *)this)->size();}
+
+MyRowVector
+MyRowVector::vectorAdd(const MyRowVector& v2) const
+{
+  const MyRowVector& v1 = *this;
+  MyRowVector res(v1.rows() + v2.rows());
+  EigenRowVector& opl = res;
+  opl.head(v1.rows()) = (const EigenRowVector &)(v1);
+  opl.tail(v2.rows()) = (const EigenRowVector &)(v2);
+  return res;
+}
+
+double& MyRowVector::operator()(unsigned int i)
+{
+  EigenRowVector& op1 = *(this);
+  return op1(i-1);
+}
+
+double MyRowVector::operator()(unsigned int i) const
+{
+  const EigenRowVector& op1 = (*this);
+  return op1(i-1);
+}
+
+bool MyRowVector::operator==(const MyRowVector& a) const
+{
+  if (this->columns() != a.columns()) return false;
+  return(((EigenRowVector)(*this)-(EigenRowVector)a).isApproxToConstant(0.0));
+}
+
+// Operators
+MyRowVector & MyRowVector::operator+= (const MyRowVector& a)
+{
+  EigenRowVector & op1 = (*this);
+  const EigenRowVector & op2 = a;
+  op1 += op2;
+  return (MyRowVector &) op1;
+}
+
+MyRowVector & MyRowVector::operator-= (const MyRowVector& a)
+{
+  EigenRowVector & op1 = (*this);
+  const EigenRowVector & op2 = a;
+  op1 -= op2;
+  return (MyRowVector &) op1;
+}
+
+MyRowVector MyRowVector::operator+ (const MyRowVector &a) const
+{
+  return (MyRowVector) ((EigenRowVector)(*this) + (EigenRowVector)a);
+}
+
+MyRowVector MyRowVector::operator- (const MyRowVector &a) const
+{
+  return (MyRowVector) ((EigenRowVector)(*this) - (EigenRowVector)a);
+}
+
+
+
+MyRowVector& MyRowVector::operator+= (double a)
+{
+  EigenRowVector & op1 = *this;
+  op1 += EigenRowVector::Constant(columns(),a);
+  return (MyRowVector&)op1;
+}
+
+MyRowVector& MyRowVector::operator-= (double a)
+{
+  EigenRowVector & op1 = *this;
+  op1 -= EigenRowVector::Constant(columns(),a);
+  return (MyRowVector&)op1;
+}
+
+MyRowVector& MyRowVector::operator*= (double a)
+{
+  EigenRowVector& op1 = *this;
+  op1 *= a;
+  return (MyRowVector&) op1;
+}
+
+MyRowVector& MyRowVector::operator/= (double a)
+{
+  EigenRowVector& op1 = *this;
+  op1 /= a;
+  return (MyRowVector&) op1;
+}
+
+
+MyRowVector MyRowVector::operator+ (double a) const
+{
+  return (MyRowVector)(((EigenRowVector)(*this)) + EigenRowVector::Constant(columns(),a));
+}
+
+MyRowVector MyRowVector::operator- (double a) const
+{
+  return (MyRowVector)(((EigenRowVector)(*this)) - EigenRowVector::Constant(columns(),a));
+}
+
+MyRowVector MyRowVector::operator* (double a) const
+{
+  const EigenRowVector & op1 = (*this);
+  return (MyRowVector) (op1 * a);
+}
+
+MyRowVector MyRowVector::operator/ (double a) const
+{
+  const EigenRowVector & op1 = (*this);
+  return (MyRowVector) (op1 / a);
+}
+
+
+
+MyColumnVector MyRowVector::transpose() const
+{
+  const EigenRowVector & op1 = (*this);
+  return MyColumnVector(op1.transpose());
+}
+
+double MyRowVector::operator* (const MyColumnVector &a) const
+{
+  const EigenRowVector & op1 = (*this);
+  const EigenColumnVector & op2 = a;
+  return (op1 * op2)(0,0);
+}
+
+MyRowVector&
+MyRowVector::operator=(const MyRowVector &a)
+{
+  EigenRowVector& op1 = *this;
+  op1 = (EigenRowVector)a;
+  return *this;
+}
+
+MyRowVector&
+MyRowVector::operator=(double a)
+{
+  EigenRowVector& op1 = *this;
+  op1.setConstant(a);
+  return *this;
+}
+
+MyRowVector MyRowVector::sub(int j_start , int j_end) const
+{
+  const EigenRowVector& op1 = *this;
+  return MyRowVector(op1.segment(j_start-1,j_end-j_start+1));
+}
+
+#endif
diff -rupN a/src/wrappers/matrix/vector_EIGEN.h b/src/wrappers/matrix/vector_EIGEN.h
--- src/wrappers/matrix/vector_EIGEN.h	1970-01-01 01:00:00.000000000 +0100
+++ src/wrappers/matrix/vector_EIGEN.h	2013-06-19 20:38:24.935594774 +0200
@@ -0,0 +1,166 @@
+#include "../config.h"
+#ifdef __MATRIXWRAPPER_EIGEN__
+
+#ifndef __VECTOR_EIGEN__
+#define __VECTOR_EIGEN__
+
+#include "matrix_wrapper.h"
+#include "vector_wrapper.h"
+
+#include <Eigen/Core>
+
+typedef Eigen::VectorXd EigenColumnVector;
+typedef Eigen::RowVectorXd EigenRowVector;
+
+
+namespace MatrixWrapper
+{
+
+/// Wrapper class for ColumnVectors (Eigen implementation)
+class ColumnVector : public EigenColumnVector, public ColumnVector_Wrapper
+{
+public:
+
+  /// Constructor
+  ColumnVector();
+
+  /// Constructor
+  ColumnVector(int nrows);
+  ColumnVector(int nrows,double value);
+
+  /// Constructor
+  ColumnVector(const MyColumnVector& a, const MyColumnVector& b);
+
+  /// Destructor
+  virtual ~ColumnVector();
+
+  /// Copy constructor
+  ColumnVector (const MyColumnVector& a);
+
+  /// Copy constructor
+  ColumnVector (const EigenColumnVector& a);
+
+  virtual void resize(int num_rows);
+  virtual unsigned int rows() const;
+  virtual unsigned int columns() const;
+  virtual unsigned int capacity() const;
+  virtual void assign(int size, double value) ;
+  virtual ColumnVector vectorAdd(const MyColumnVector& v2) const;
+
+  using EigenColumnVector::operator ==;
+  using EigenColumnVector::operator =;
+  using EigenColumnVector::operator +=;
+  using EigenColumnVector::operator -=;
+  using EigenColumnVector::operator +;
+  using EigenColumnVector::operator -;
+
+  virtual ColumnVector& operator =(const MyColumnVector& a);
+  virtual ColumnVector& operator =(double a);
+
+  virtual MyColumnVector & operator+= (const MyColumnVector& a);
+  virtual MyColumnVector & operator-= (const MyColumnVector& a);
+  virtual MyColumnVector operator+ (const MyColumnVector &a) const;
+  virtual MyColumnVector operator- (const MyColumnVector &a) const;
+
+  virtual MyColumnVector& operator+= (double b);
+  virtual MyColumnVector& operator-= (double b);
+  virtual MyColumnVector& operator*= (double b);
+  virtual MyColumnVector& operator/= (double b);
+  virtual MyColumnVector operator+ (double b) const;
+  virtual MyColumnVector operator- (double b) const;
+  virtual MyColumnVector operator* (double b) const;
+  virtual MyColumnVector operator/ (double b) const;
+
+  /// element indexing STARTING FROM 0
+  virtual double operator[](unsigned int i) const
+  { 
+  //std::cout << "(BOOSTVECTOR) operator[] called " << i << std::endl;
+   // if (i==0)
+   //     std::cout << "(BOOSTVECTOR) operator[0]" << std::endl;
+    
+   return (*this)(i+1);
+  }
+
+  /// element indexing STARTING FROM 0
+  virtual double& operator[](unsigned int i) 
+  { 
+  //std::cout << "(BOOSTVECTOR) operator[] called " << i << std::endl;
+  //  if (i==0)
+  //      std::cout << "(BOOSTVECTOR) operator[0]" << std::endl;
+     return (*this)(i+1);
+  }
+
+  virtual double operator()(unsigned int) const;
+  virtual bool operator==(const MyColumnVector& a) const;
+  virtual double& operator()(unsigned int);
+  virtual MyMatrix operator* (const MyRowVector &a) const;
+  virtual MyColumnVector sub(int j_start , int j_end) const;
+  virtual MyRowVector transpose() const;
+
+
+};
+
+/// Wrapper class for RowVectors (Eigen implementation)
+class RowVector : public EigenRowVector, public RowVector_Wrapper
+{
+  // No private member:  We don't add anything.
+
+  // Public Members
+ public:
+  RowVector();
+  RowVector(int ncols);
+  RowVector(int ncols,double value);
+  // If you have another constructor in the matrix library you
+  // want to use, you'll have to redefine it yourself
+
+  // Copy constructor
+  RowVector (const MyRowVector& a);
+  // Copy constructor for Eigen
+  RowVector (const EigenRowVector& a);
+
+  virtual ~RowVector();
+
+  virtual void resize(int num_cols);
+  virtual void assign(int size, double value) ;
+  virtual RowVector vectorAdd(const MyRowVector& v2) const;
+  virtual unsigned int rows() const;
+  virtual unsigned int columns() const;
+  virtual unsigned int capacity() const;
+  virtual RowVector& operator =(double a);
+  virtual RowVector& operator =(const MyRowVector& a);
+
+  using EigenRowVector::operator ==;
+  using EigenRowVector::operator =;
+  using EigenRowVector::operator +=;
+  using EigenRowVector::operator -=;
+  using EigenRowVector::operator +;
+  using EigenRowVector::operator -;
+
+  virtual MyRowVector & operator+= (const MyRowVector& a);
+  virtual MyRowVector & operator-= (const MyRowVector& a);
+  virtual MyRowVector operator+ (const MyRowVector &a) const;
+  virtual MyRowVector operator- (const MyRowVector &a) const;
+
+  virtual MyRowVector& operator+= (double b);
+  virtual MyRowVector& operator-= (double b);
+  virtual MyRowVector& operator*= (double b);
+  virtual MyRowVector& operator/= (double b);
+  virtual MyRowVector operator+ (double b) const;
+  virtual MyRowVector operator- (double b) const;
+  virtual MyRowVector operator* (double b) const;
+  virtual MyRowVector operator/ (double b) const;
+
+  virtual double operator()(unsigned int) const;
+  virtual bool operator==(const MyRowVector& a) const;
+  virtual double& operator()(unsigned int);
+  virtual MyRowVector sub(int j_start , int j_end) const;
+  virtual MyColumnVector transpose() const;
+  virtual double operator*(const MyColumnVector& a) const;
+
+};
+
+}
+
+#endif
+
+#endif
diff -rupN a/src/wrappers/matrix/vector_wrapper.h b/src/wrappers/matrix/vector_wrapper.h
--- src/wrappers/matrix/vector_wrapper.h	2013-06-19 20:38:11.535763234 +0200
+++ src/wrappers/matrix/vector_wrapper.h	2013-06-19 20:38:24.935594774 +0200
@@ -241,5 +241,6 @@ public:
 #include "vector_NEWMAT.h"
 #include "vector_LTI.h"
 #include "vector_BOOST.h"
+#include "vector_EIGEN.h"
 
 #endif // __OROVECTOR__
