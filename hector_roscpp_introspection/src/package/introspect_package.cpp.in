//=================================================================================================
// Copyright (c) 2011, Johannes Meyer, TU Darmstadt
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Flight Systems and Automatic Control group,
//       TU Darmstadt, nor the names of its contributors may be used to
//       endorse or promote products derived from this software without
//       specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//=================================================================================================

#include <introspection/package.h>

#define PACKAGE @package@
#define STRINGIFY(s) xSTRINGIFY(s)
#define xSTRINGIFY(s) #s

namespace roscpp_introspection {
namespace PACKAGE {

@DECLARE_MESSAGES@

  class Introspection : public Package {
  public:
    Introspection();
    const char *getName() const;
  };

  Introspection::Introspection() {
@ADD_MESSAGES@
  }

  const char *Introspection::getName() const {
    const char* name = STRINGIFY(PACKAGE);
    return name;
  }

} // namespace PACKAGE

} // namespace roscpp_introspection

extern "C" {
  __attribute__((visibility("default"))) roscpp_introspection::Package* roscpp_introspection_load_package()
  {
    roscpp_introspection::Package* instance = new roscpp_introspection::PACKAGE::Introspection();
    roscpp_introspection::Package::add(roscpp_introspection::PackagePtr(instance));
    return instance;
  }
}
